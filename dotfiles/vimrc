" vim-pathogen : https://github.com/tpope/vim-pathogen
call pathogen#infect()

set nocompatible      " We're running Vim, not Vi!
set encoding=utf-8    " set encoding to utf-8
filetype on           " Enable fieltype detection
filetype plugin on    " Enable filetype-specific plugins
filetype indent off    " Disable filetype-specific indenting (I HATE IT!)
"filetype plugin indent off "more no indent magicalness

"set noswf             "disable swapfile

" change location of .viminfo and swp files
" make the ~/.vim/tmp/ directory manually
set viminfo='20,<50,s10,h,n~/.vim/.viminfo
set dir=~/.vim/tmp//   "set swp dir. trailing slashes avoid collisions
                          "by replacing path with %
"set viminfo=""         "turn off viminfo

" scroll by 3 line at window buffer edge instead of just 1 (shows more context)
set scrolloff=3
set sidescrolloff=3

"searching related"
set ignorecase        "Ignore case in searches --opposite is: set noic
set noincsearch       "disable incremental word highlight search thing
set nohls             "does not highlight searches
set smartcase         "unless they contain upper-case letters

"indexting related"
set expandtab         "replace tabs with spaces
set ts=4              "tab stop
set softtabstop=4     "use the same value as shiftwidth
set shiftwidth=4      "use 4 spaces when using autoindent/cindent
set smarttab          "smart tabs??
set autoindent        "Autoindentation
set smartindent       "smart indenting is smart
set wrap              "wrap
set ww=<,>,[,]        "allows left at start of line to go to end of prev line

"display"
"set title             "Put title in title bar
syntax on             "Enable syntax highlighting
set synmaxcol=200     "syntax highlight for only first 200 chars in a line
set showmatch         "show matching parenthesis,brackets,etc
set showcmd           "show current uncompleted command
set ttyfast           "Smoother changes

"claims to make vim a bit faster.
:set lazyredraw


"misc"
"set noerrorbells      "no beeps
set visualbell        "visual bell instead of beeping
set nobackup          "no backup copies..
"set nowritebackup     "don't keep a backup file while the file is being edited
set nomodeline        "don't have files trying to override this .vimrc
set nostartofline     "don't jump cursor around, stay in current column
"set backspace=2       " Allow backspace to back over lines
set backspace=indent,eol,start "allow backspace over everything w\insert mode
set shell=bash
"set number           "show line numbers
set ruler             "show file location at the bottom right
set hidden            "current buffer can be backgrounded without having to
                      "write something out. remembers marks and history.

" switch to tab if buffer already open there
set switchbuf=usetab

" function to strip trailing whitespace
function! StripWhitespace()
    normal m`
    %s/\s\+$//e
    normal ``
endfunction

" underline line with specified string
" :Underline =
" :Underline ~=~
function! s:Underline(chars)
  let chars = empty(a:chars) ? '-' : a:chars
  let nr_columns = virtcol('$') - 1
  let uline = repeat(chars, (nr_columns / len(chars)) + 1)
  put =strpart(uline, 0, nr_columns)
endfunction
command! -nargs=? Underline call s:Underline(<q-args>)

"set completeopt=menu

""""""
"""""" FileType support and file detection autocommands
""""""
"The following removes extra space at ends of lines, for certain file types
"autocmd BufWritePre *.py normal m`:%s/\s\+$//e ``
autocmd BufWritePre *.py :call StripWhitespace()
" highlight trailing whitespace
autocmd BufRead,BufNewFile *.py match Error /\s\+$/

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

" For all text files set 'textwidth' to 78 characters.
autocmd FileType text setlocal textwidth=78 colorcolumn=85

" disable expandtab in makefile
autocmd FileType make set noet

" set linebreak for markdown and text
autocmd FileType markdown,text set linebreak et

" make vim go to start of first line in a git commit instead of remembering
" the last position
"autocmd FileType gitcommit call setpos('.', [0, 1, 1, 0])
autocmd FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" automatically handle split equalization on window resize
autocmd VimResized * wincmd =

" some stuff for Go
" Note: Switched to vim-go via pathogen
"let g:gofmt_command = "goimports"
"autocmd FileType go autocmd BufWritePre <buffer> Fmt

" no clue what this does anymore...but umm... it looks neat. Wild!
set wildchar=<tab>
set wildmenu
set wildmode=longest:full,full

" GPG Stuff
let g:GPGUseAgent = 1

" explore
let g:netrw_altv = 1
let g:netrw_alto = 1

" remap leader key
let mapleader = ","

""""" ramaps
"dont auto unindent # comments
inoremap # X<BS>#

set pastetoggle=<F11>
nnoremap <leader>p <F11>
" newline after line, in normal mode
nnoremap <leader>o o<Esc>
" newline before line, in normal mode
nnoremap <leader>O O<Esc>
" cd to current file directory
nnoremap <leader>cd :cd %:p:h<CR>

" F5 to insert current date/time
inoremap <F5> <C-R>=strftime("%Y-%m-%d %H:%M")<CR>
"" when in normal mode
" ,w to call stripwhitespace
nnoremap <leader>ws :call StripWhitespace()<CR>
" ,m call Markedapp.app with current file
"  from: http://captainbollocks.tumblr.com/post/9858989188/linking-macvim-and-marked-app
nnoremap <leader>m :silent !open -a Marked.app '%:p'<cr>
" ,q to re-hardware paragraphs... so much win.
"  from: http://stevelosh.com/blog/2010/09/coming-home-to-vim/#using-the-leader
nnoremap <leader>q gqip
nnoremap <leader>sh <C-w>s<C-w>j
nnoremap <leader>sv <C-w>v<C-w>l
" ,jf to pretty print json file
nnoremap <leader>jpp :%!python -mjson.tool

" rainbow parens
function! RainbowLoad()
  "call rainbow_parentheses#load(0)
  call rainbow_parentheses#load(1)
  call rainbow_parentheses#load(2)
  call rainbow_parentheses#load(3)
endfunction
autocmd Syntax * call RainbowLoad()

nnoremap <leader>rp :RainbowParenthesesToggle<cr>
let g:rbpt_colorpairs = [
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ]
let g:rbpt_max = 16

" change searching to 'normal' regex
nnoremap / /\v
vnoremap / /\v

"Set some colors"
set background=dark
colorscheme desert

if has('gui_running')
    "colorscheme desert
    "set gfn:Monaco:h11
    set gfn:InputMono\ Thin:h11
    "set noantialias
    set antialias
    set columns=90
    set lines=35
    set guioptions-=T
    set mouse=a "enable visual mouse mode in gvim/macvim
    set gcr=a:blinkon0
else
    "set mouse=h             "disable goofy mousing
    set mouse=a
endif

if has("gui_macvim")
    " Swipe to move between bufers :D
    map <SwipeLeft> :bprev<CR>
    map <SwipeRight> :bnext<CR>
endif

"highlight LineNr  term=NONE
"hi Normal          ctermfg=black       ctermbg=white
"hi Comment         ctermfg=lightgreen
"hi Function        ctermfg=lightred
"hi Statement       ctermfg=lightblue
"hi Include         ctermfg=lightblue
"hi htmlSpecialChar ctermfg=yellow
"hi Define          ctermfg=lightblue
"hi Constant        ctermfg=magenta
"hi Special         ctermfg=white
"hi Type            ctermfg=lightblue

" if I wanted rainbows, I'd code in fucking skittles.
hi clear Identifier
hi clear Statement
"hi clear Constant
"hi clear PreProc
"hi clear Type
"hi Type             term=NONE ctermfg=2 gui=NONE guifg=darkkhaki
"hi Type             term=NONE gui=NONE ctermfg=yellow guifg=darkkhaki
"hi Type             term=NONE cterm=NONE ctermfg=light gui=NONE guifg=darkkhaki
"hi Type             term=NONE  cterm=NONE  ctermfg=229  gui=NONE guifg=darkkhaki
hi Type             term=NONE  cterm=NONE  ctermfg=2 gui=NONE guifg=darkkhaki

hi Pmenu            cterm=NONE  ctermfg=lightblue   ctermbg=lightgrey
hi PmenuSel         cterm=BOLD  ctermfg=yellow      ctermbg=darkgrey
hi PmenuSbar        cterm=BOLD  ctermfg=lightblue   ctermbg=lightgrey
hi PmenuThumb       cterm=BOLD  ctermfg=cyan        ctermbg=darkgrey

" some language specific overrides
hi zigConstant  term=NONE  cterm=NONE  ctermfg=2 gui=NONE guifg=darkkhaki
hi zigStatement term=NONE  cterm=NONE  ctermfg=2 gui=NONE guifg=darkkhaki
hi zigStructure term=NONE  cterm=NONE  ctermfg=2 gui=NONE guifg=darkkhaki
hi zigStorage   term=NONE  cterm=NONE  ctermfg=2 gui=NONE guifg=darkkhaki
hi zigKeyword   term=NONE  cterm=NONE  ctermfg=2 gui=NONE guifg=darkkhaki

" set printheader to just filename (nice for :hardcopy)
"   see http://vimdoc.sourceforge.net/htmldoc/options.html#'statusline' for
"   more options
set printheader=%t
set laststatus=2

" airline
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_theme="bubblegum"
let g:airline_mode_map = {
      \ '__' : '-',
      \ 'n'  : 'N',
      \ 'i'  : 'I',
      \ 'R'  : 'R',
      \ 'c'  : 'C',
      \ 'v'  : 'V',
      \ 'V'  : 'V',
      \ '^V' : 'V',
      \ 's'  : 'S',
      \ 'S'  : 'S',
      \ '^S' : 'S',
      \ }
let g:airline#extensions#virtualenv#enabled=0
let g:airline#extensions#tmuxline#enabled=0
let g:airline#extensions#promptline#enabled=0

" terraform
let g:terraform_align=1
let g:terraform_fmt_on_save=1
